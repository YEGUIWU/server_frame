!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddAppender	log.cc	/^        void Logger::AddAppender(LogAppender::ptr appender)$/;"	f	class:ygw::log::Logger
AddListener	config.h	/^            uint64_t AddListener(on_change_cb cb) $/;"	f	class:ygw::config::ConfigVar
ClearAppenders	log.cc	/^        void Logger::ClearAppenders() $/;"	f	class:ygw::log::Logger
ClearListener	config.h	/^            void ClearListener() $/;"	f	class:ygw::config::ConfigVar
Config	config.h	/^        class Config {$/;"	c	namespace:ygw::config
ConfigVar	config.h	/^            ConfigVar(const std::string& name$/;"	f	class:ygw::config::ConfigVar
ConfigVar	config.h	/^        class ConfigVar : public ConfigVarBase $/;"	c	namespace:ygw::config
ConfigVarBase	config.h	/^            ConfigVarBase(const std::string& name, $/;"	f	class:ygw::config::ConfigVarBase
ConfigVarBase	config.h	/^        class ConfigVarBase {$/;"	c	namespace:ygw::config
ConfigVarMap	config.h	/^            typedef std::unordered_map<std::string, ConfigVarBase::ptr> ConfigVarMap;$/;"	t	class:ygw::config::Config
DateTimeFormatItem	log.cc	/^            DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%S")$/;"	f	class:ygw::log::DateTimeFormatItem
DateTimeFormatItem	log.cc	/^        class DateTimeFormatItem : public LogFormatter::FormatItem $/;"	c	namespace:ygw::log	file:
Debug	log.cc	/^        void Logger::Debug(LogEvent::ptr event)$/;"	f	class:ygw::log::Logger
DelAppender	log.cc	/^        void Logger::DelAppender(LogAppender::ptr appender)$/;"	f	class:ygw::log::Logger
DelListener	config.h	/^            void DelListener(uint64_t key) $/;"	f	class:ygw::config::ConfigVar
ElapseFormatItem	log.cc	/^            ElapseFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::ElapseFormatItem
ElapseFormatItem	log.cc	/^        class ElapseFormatItem : public LogFormatter::FormatItem $/;"	c	namespace:ygw::log	file:
Error	log.cc	/^        void Logger::Error(LogEvent::ptr event)$/;"	f	class:ygw::log::Logger
Fatal	log.cc	/^        void Logger::Fatal(LogEvent::ptr event)$/;"	f	class:ygw::log::Logger
FiberIdFormatItem	log.cc	/^            FiberIdFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::FiberIdFormatItem
FiberIdFormatItem	log.cc	/^        class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
FileLogAppender	log.cc	/^        FileLogAppender::FileLogAppender(const std::string& filename)$/;"	f	class:ygw::log::FileLogAppender
FileLogAppender	log.h	/^        class FileLogAppender : public LogAppender {$/;"	c	namespace:ygw::log
FilenameFormatItem	log.cc	/^                FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::FilenameFormatItem
FilenameFormatItem	log.cc	/^        class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
Format	log.cc	/^        std::ostream& LogFormatter::Format(std::ostream& ofs, $/;"	f	class:ygw::log::LogFormatter
Format	log.cc	/^        std::string LogFormatter::Format(std::shared_ptr<Logger> logger,$/;"	f	class:ygw::log::LogFormatter
Format	log.cc	/^        void LogEvent::Format(const char* fmt, ...) $/;"	f	class:ygw::log::LogEvent
Format	log.cc	/^        void LogEvent::Format(const char* fmt, va_list al) $/;"	f	class:ygw::log::LogEvent
FormatItem	log.h	/^            class FormatItem {$/;"	c	class:ygw::log::LogFormatter
FromString	log.cc	/^        LogLevel::Level LogLevel::FromString(const std::string& str) {$/;"	f	class:ygw::log::LogLevel
GetContent	log.h	/^            std::string GetContent() const { return string_stream_.str();}$/;"	f	class:ygw::log::LogEvent
GetDatas	config.h	/^            static ConfigVarMap& GetDatas() $/;"	f	class:ygw::config::Config
GetElapse	log.h	/^            uint32_t GetElapse() const { return elapse_;}$/;"	f	class:ygw::log::LogEvent
GetEvent	log.h	/^            LogEvent::ptr GetEvent() const { return event_;}$/;"	f	class:ygw::log::LogEventWrap
GetFiberId	log.h	/^            uint32_t GetFiberId() const { return fiber_id_;}$/;"	f	class:ygw::log::LogEvent
GetFiberId	util.cc	/^        int GetFiberId()$/;"	f	namespace:ygw::util
GetFile	log.h	/^            const char* GetFile() const { return filename_;}$/;"	f	class:ygw::log::LogEvent
GetFormatter	log.cc	/^        LogFormatter::ptr LogAppender::GetFormatter() $/;"	f	class:ygw::log::LogAppender
GetFormatter	log.cc	/^        LogFormatter::ptr Logger::GetFormatter() $/;"	f	class:ygw::log::Logger
GetInstance	singleton.h	/^            static T* GetInstance()$/;"	f	class:ygw::mode::Singleton
GetInstance	singleton.h	/^            static std::shared_ptr<T> GetInstance() $/;"	f	class:ygw::mode::SingletonPtr
GetLevel	log.h	/^            LogLevel::Level GetLevel() const { return level_;}$/;"	f	class:ygw::log::LogAppender
GetLevel	log.h	/^            LogLevel::Level GetLevel() const { return level_;}$/;"	f	class:ygw::log::LogEvent
GetLevel	log.h	/^            LogLevel::Level GetLevel() const { return level_;}$/;"	f	class:ygw::log::Logger
GetLine	log.h	/^            int32_t GetLine() const { return line_;}$/;"	f	class:ygw::log::LogEvent
GetListener	config.h	/^            on_change_cb GetListener(uint64_t key) $/;"	f	class:ygw::config::ConfigVar
GetLogger	log.cc	/^        Logger::ptr LoggerManager::GetLogger(const std::string& name) $/;"	f	class:ygw::log::LoggerManager
GetLogger	log.h	/^            std::shared_ptr<Logger> GetLogger() const { return logger_;}$/;"	f	class:ygw::log::LogEvent
GetName	log.h	/^            const std::string& GetName() const { return name_;}$/;"	f	class:ygw::log::Logger
GetRoot	log.h	/^            Logger::ptr GetRoot() const { return root_;}$/;"	f	class:ygw::log::LoggerManager
GetStringStream	log.cc	/^        std::stringstream& LogEventWrap::GetStringStream() $/;"	f	class:ygw::log::LogEventWrap
GetStringStream	log.h	/^            std::stringstream& GetStringStream() { return string_stream_;}$/;"	f	class:ygw::log::LogEvent
GetThreadId	log.h	/^            uint32_t GetThreadId() const { return thread_id_;}$/;"	f	class:ygw::log::LogEvent
GetThreadId	util.cc	/^        int GetThreadId()$/;"	f	namespace:ygw::util
GetThreadName	log.h	/^            const std::string& GetThreadName() const { return thread_name_;}$/;"	f	class:ygw::log::LogEvent
GetTime	log.h	/^            uint64_t GetTime() const { return time_;}$/;"	f	class:ygw::log::LogEvent
GetValue	config.h	/^            const T GetValue() $/;"	f	class:ygw::config::ConfigVar
Info	log.cc	/^        void Logger::Info(LogEvent::ptr event)$/;"	f	class:ygw::log::Logger
Init	log.cc	/^        void LogFormatter::Init()$/;"	f	class:ygw::log::LogFormatter
Init	log.cc	/^        void LoggerManager::Init() $/;"	f	class:ygw::log::LoggerManager
IsError	log.h	/^            bool IsError() const { return is_error_;}$/;"	f	class:ygw::log::LogFormatter
Level	log.h	/^            enum Level {$/;"	g	class:ygw::log::LogLevel
LevelFormatItem	log.cc	/^            LevelFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::LevelFormatItem
LevelFormatItem	log.cc	/^        class LevelFormatItem : public LogFormatter::FormatItem $/;"	c	namespace:ygw::log	file:
LexicalCast	config.h	/^		class LexicalCast<std::list<T>, std::string> {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::map<std::string, T>, std::string> {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::set<T>, std::string> {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::string, std::list<T> > {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::string, std::map<std::string, T> > {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::string, std::set<T> > {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::string, std::unordered_map<std::string, T> > {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::string, std::unordered_set<T> > {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::unordered_map<std::string, T>, std::string> {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::unordered_set<T>, std::string> {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^		class LexicalCast<std::vector<T>, std::string> {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^        class LexicalCast {$/;"	c	namespace:ygw::config
LexicalCast	config.h	/^        class LexicalCast<std::string, std::vector<T> > {$/;"	c	namespace:ygw::config
LineFormatItem	log.cc	/^                LineFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::LineFormatItem
LineFormatItem	log.cc	/^        class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
ListAllMember	config.cc	/^        static void ListAllMember(const std::string& prefix,$/;"	f	namespace:ygw::config
LoadFromConfDir	config.cc	/^        void Config::LoadFromConfDir(const std::string& path, bool force) $/;"	f	class:ygw::config::Config
LoadFromYaml	config.cc	/^        void Config::LoadFromYaml(const YAML::Node& root) $/;"	f	class:ygw::config::Config
Log	log.cc	/^        void FileLogAppender::Log(Logger::ptr logger, $/;"	f	class:ygw::log::FileLogAppender
Log	log.cc	/^        void Logger::Log(LogLevel::Level level, LogEvent::ptr event)$/;"	f	class:ygw::log::Logger
Log	log.cc	/^        void StdoutLogAppender::Log(Logger::ptr logger,$/;"	f	class:ygw::log::StdoutLogAppender
LogAppender	log.h	/^        class LogAppender {$/;"	c	namespace:ygw::log
LogEvent	log.cc	/^        LogEvent::LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level$/;"	f	class:ygw::log::LogEvent
LogEvent	log.h	/^        class LogEvent {$/;"	c	namespace:ygw::log
LogEventWrap	log.cc	/^        LogEventWrap::LogEventWrap(LogEvent::ptr e)$/;"	f	class:ygw::log::LogEventWrap
LogEventWrap	log.h	/^        class LogEventWrap {$/;"	c	namespace:ygw::log
LogFormatter	log.cc	/^        LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:ygw::log::LogFormatter
LogFormatter	log.h	/^        class LogFormatter {$/;"	c	namespace:ygw::log
LogLevel	log.h	/^        class LogLevel {$/;"	c	namespace:ygw::log
Logger	log.cc	/^        Logger::Logger(const std::string& name)$/;"	f	class:ygw::log::Logger
Logger	log.h	/^        class Logger : public std::enable_shared_from_this<Logger> $/;"	c	namespace:ygw::log
LoggerManager	log.cc	/^        LoggerManager::LoggerManager() $/;"	f	class:ygw::log::LoggerManager
LoggerManager	log.h	/^        class LoggerManager {$/;"	c	namespace:ygw::log
Lookup	config.h	/^            static typename ConfigVar<T>::ptr Lookup(const std::string& name) $/;"	f	class:ygw::config::Config
Lookup	config.h	/^            static typename ConfigVar<T>::ptr Lookup(const std::string& name,$/;"	f	class:ygw::config::Config
LookupBase	config.cc	/^        ConfigVarBase::ptr Config::LookupBase(const std::string& name) $/;"	f	class:ygw::config::Config
MessageFormatItem	log.cc	/^            MessageFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::MessageFormatItem
MessageFormatItem	log.cc	/^        class MessageFormatItem : public LogFormatter::FormatItem $/;"	c	namespace:ygw::log	file:
NameFormatItem	log.cc	/^            NameFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::NameFormatItem
NameFormatItem	log.cc	/^        class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
NewLineFormatItem	log.cc	/^                NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::NewLineFormatItem
NewLineFormatItem	log.cc	/^        class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
ReOpen	log.cc	/^        bool FileLogAppender::ReOpen()$/;"	f	class:ygw::log::FileLogAppender
SetFormatter	log.cc	/^        void LogAppender::SetFormatter(LogFormatter::ptr val) $/;"	f	class:ygw::log::LogAppender
SetFormatter	log.cc	/^        void Logger::SetFormatter(LogFormatter::ptr val) $/;"	f	class:ygw::log::Logger
SetFormatter	log.cc	/^        void Logger::SetFormatter(const std::string& val) {$/;"	f	class:ygw::log::Logger
SetLevel	log.h	/^            void SetLevel(LogLevel::Level val) { level_ = val;}$/;"	f	class:ygw::log::LogAppender
SetLevel	log.h	/^            void SetLevel(LogLevel::Level val) { level_ = val;}$/;"	f	class:ygw::log::Logger
SetValue	config.h	/^            void SetValue(const T& v) $/;"	f	class:ygw::config::ConfigVar
Singleton	singleton.h	/^        class Singleton {$/;"	c	namespace:ygw::mode
SingletonPtr	singleton.h	/^        class SingletonPtr {$/;"	c	namespace:ygw::mode
StdoutLogAppender	log.h	/^        class StdoutLogAppender : public LogAppender {$/;"	c	namespace:ygw::log
StringFormatItem	log.cc	/^            StringFormatItem(const std::string& str)$/;"	f	class:ygw::log::StringFormatItem
StringFormatItem	log.cc	/^        class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
TabFormatItem	log.cc	/^                TabFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::TabFormatItem
TabFormatItem	log.cc	/^        class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
ThreadIdFormatItem	log.cc	/^            ThreadIdFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::ThreadIdFormatItem
ThreadIdFormatItem	log.cc	/^        class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:ygw::log	file:
ThreadNameFormatItem	log.cc	/^            ThreadNameFormatItem(const std::string& str = "") {}$/;"	f	class:ygw::log::ThreadNameFormatItem
ThreadNameFormatItem	log.cc	/^        class ThreadNameFormatItem : public LogFormatter::FormatItem $/;"	c	namespace:ygw::log	file:
ToString	log.cc	/^        const char* LogLevel::ToString(LogLevel::Level level) $/;"	f	class:ygw::log::LogLevel
Visit	config.cc	/^        void Config::Visit(std::function<void(ConfigVarBase::ptr)> cb) $/;"	f	class:ygw::config::Config
Warn	log.cc	/^        void Logger::Warn(LogEvent::ptr event)$/;"	f	class:ygw::log::Logger
XX	log.cc	48;"	d	file:
XX	log.cc	620;"	d	file:
XX	log.cc	635;"	d	file:
XX	log.cc	64;"	d	file:
YGW_LOG_DEBUG	log.h	42;"	d
YGW_LOG_ERROR	log.h	57;"	d
YGW_LOG_FATAL	log.h	62;"	d
YGW_LOG_FMT_DEBUG	log.h	76;"	d
YGW_LOG_FMT_ERROR	log.h	91;"	d
YGW_LOG_FMT_FATAL	log.h	96;"	d
YGW_LOG_FMT_INFO	log.h	81;"	d
YGW_LOG_FMT_LEVEL	log.h	67;"	d
YGW_LOG_FMT_WARN	log.h	86;"	d
YGW_LOG_INFO	log.h	47;"	d
YGW_LOG_LEVEL	log.h	33;"	d
YGW_LOG_NAME	log.h	106;"	d
YGW_LOG_ROOT	log.h	101;"	d
YGW_LOG_WARN	log.h	52;"	d
__YGW_CONFIG_H__	config.h	14;"	d
__YGW_LOG_H__	log.h	14;"	d
__YGW_SINGLETON_H__	singleton.h	14;"	d
__YGW_UTIL_H__	util.h	14;"	d
appenders_	log.h	/^            std::list<LogAppender::ptr> appenders_;$/;"	m	class:ygw::log::Logger
cbs_	config.h	/^            std::map<uint64_t, on_change_cb> cbs_;$/;"	m	class:ygw::config::ConfigVar
config	config.cc	/^    namespace config {$/;"	n	namespace:ygw	file:
config	config.h	/^    namespace config {$/;"	n	namespace:ygw
description_	config.h	/^            std::string description_;$/;"	m	class:ygw::config::ConfigVarBase
elapse_	log.h	/^            uint32_t elapse_ = 0;          $/;"	m	class:ygw::log::LogEvent
event_	log.h	/^            LogEvent::ptr event_;$/;"	m	class:ygw::log::LogEventWrap
fiber_id_	log.h	/^            uint32_t fiber_id_ = 0;         $/;"	m	class:ygw::log::LogEvent
filename_	log.h	/^            const char* filename_ = nullptr;   $/;"	m	class:ygw::log::LogEvent
filename_	log.h	/^            std::string filename_;$/;"	m	class:ygw::log::FileLogAppender
fileout_	log.h	/^            std::ofstream fileout_; $/;"	m	class:ygw::log::FileLogAppender
format_	log.cc	/^            std::string format_;$/;"	m	class:ygw::log::DateTimeFormatItem	file:
formatter_	log.h	/^            LogFormatter::ptr formatter_;$/;"	m	class:ygw::log::LogAppender
formatter_	log.h	/^            LogFormatter::ptr formatter_;$/;"	m	class:ygw::log::Logger
g_logger	config.cc	/^        static ygw::log::Logger::ptr g_logger = YGW_LOG_NAME("system");$/;"	m	namespace:ygw::config	file:
getDescription	config.h	/^            const std::string& getDescription() const { return description_; }$/;"	f	class:ygw::config::ConfigVarBase
getName	config.h	/^            const std::string& getName() const { return name_; }$/;"	f	class:ygw::config::ConfigVarBase
getPattern	log.h	/^            const std::string getPattern() const { return pattern_; }$/;"	f	class:ygw::log::LogFormatter
has_formatter_	log.h	/^            bool has_formatter_ = false;$/;"	m	class:ygw::log::LogAppender
is_error_	log.h	/^            bool is_error_= false;$/;"	m	class:ygw::log::LogFormatter
items_	log.h	/^            std::vector<FormatItem::ptr> items_;$/;"	m	class:ygw::log::LogFormatter
kDebug	log.h	/^                kDebug = 1,$/;"	e	enum:ygw::log::LogLevel::Level
kError	log.h	/^                kError = 4,$/;"	e	enum:ygw::log::LogLevel::Level
kFatal	log.h	/^                kFatal = 5$/;"	e	enum:ygw::log::LogLevel::Level
kInfo	log.h	/^                kInfo = 2,$/;"	e	enum:ygw::log::LogLevel::Level
kUnknown	log.h	/^                kUnknown = 0,$/;"	e	enum:ygw::log::LogLevel::Level
kWarn	log.h	/^                kWarn = 3,$/;"	e	enum:ygw::log::LogLevel::Level
last_time_	log.h	/^            uint64_t last_time_ = 0;$/;"	m	class:ygw::log::FileLogAppender
level_	log.h	/^            LogLevel::Level level_ = LogLevel::Level::kDebug;$/;"	m	class:ygw::log::LogAppender
level_	log.h	/^            LogLevel::Level level_;                 $/;"	m	class:ygw::log::Logger
level_	log.h	/^            LogLevel::Level level_;$/;"	m	class:ygw::log::LogEvent
line_	log.h	/^            int32_t line_ = 0;              $/;"	m	class:ygw::log::LogEvent
log	log.cc	/^    namespace log {$/;"	n	namespace:ygw	file:
log	log.h	/^    namespace log {$/;"	n	namespace:ygw
logger_	log.h	/^            std::shared_ptr<Logger> logger_;$/;"	m	class:ygw::log::LogEvent
loggers_	log.h	/^            std::map<std::string, Logger::ptr> loggers_;$/;"	m	class:ygw::log::LoggerManager
m_string	log.cc	/^                std::string m_string;$/;"	m	class:ygw::log::TabFormatItem	file:
m_string	log.cc	/^            std::string m_string;$/;"	m	class:ygw::log::StringFormatItem	file:
mode	singleton.h	/^    namespace mode {$/;"	n	namespace:ygw
name_	config.h	/^            std::string name_;$/;"	m	class:ygw::config::ConfigVarBase
name_	log.h	/^            std::string name_;                  $/;"	m	class:ygw::log::Logger
operator ()	config.h	/^			std::list<T> operator()(const std::string& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::map<std::string, T> operator()(const std::string& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::set<T> operator()(const std::string& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::string operator()(const std::list<T>& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::string operator()(const std::map<std::string, T>& v) $/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::string operator()(const std::set<T>& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::string operator()(const std::unordered_map<std::string, T>& v) $/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::string operator()(const std::unordered_set<T>& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::string operator()(const std::vector<T>& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::unordered_map<std::string, T> operator()(const std::string& v) $/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^			std::unordered_set<T> operator()(const std::string& v) {$/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^            T operator()(const F& v) $/;"	f	class:ygw::config::LexicalCast
operator ()	config.h	/^            std::vector<T> operator()(const std::string& v) $/;"	f	class:ygw::config::LexicalCast
override	log.h	/^                    LogEvent::ptr event) override;$/;"	m	class:ygw::log::StdoutLogAppender
override	log.h	/^            void Log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:ygw::log::FileLogAppender
pattern_	log.h	/^            std::string pattern_;$/;"	m	class:ygw::log::LogFormatter
root_	log.h	/^            Logger::ptr root_;$/;"	m	class:ygw::log::Logger
root_	log.h	/^            Logger::ptr root_;$/;"	m	class:ygw::log::LoggerManager
s_file2modifytime	config.cc	/^        static std::map<std::string, uint64_t> s_file2modifytime;$/;"	m	namespace:ygw::config	file:
string_stream_	log.h	/^            std::stringstream string_stream_;$/;"	m	class:ygw::log::LogEvent
thread_id_	log.h	/^            uint32_t thread_id_ = 0;$/;"	m	class:ygw::log::LogEvent
thread_name_	log.h	/^            std::string thread_name_;$/;"	m	class:ygw::log::LogEvent
time_	log.h	/^            uint64_t time_ = 0;             $/;"	m	class:ygw::log::LogEvent
util	util.cc	/^    namespace util {$/;"	n	namespace:ygw	file:
util	util.h	/^    namespace util {$/;"	n	namespace:ygw
val_	config.h	/^            T val_;$/;"	m	class:ygw::config::ConfigVar
ygw	config.cc	/^namespace ygw {$/;"	n	file:
ygw	config.h	/^namespace ygw {$/;"	n
ygw	log.cc	/^namespace ygw {$/;"	n	file:
ygw	log.h	/^namespace ygw {$/;"	n
ygw	singleton.h	/^namespace ygw {$/;"	n
ygw	util.cc	/^namespace ygw {$/;"	n	file:
ygw	util.h	/^namespace ygw {$/;"	n
~ConfigVarBase	config.h	/^            virtual ~ConfigVarBase() {}$/;"	f	class:ygw::config::ConfigVarBase
~FormatItem	log.h	/^                virtual ~FormatItem() {}$/;"	f	class:ygw::log::LogFormatter::FormatItem
~LogAppender	log.h	/^            virtual ~LogAppender() {}$/;"	f	class:ygw::log::LogAppender
~LogEventWrap	log.cc	/^        LogEventWrap::~LogEventWrap() $/;"	f	class:ygw::log::LogEventWrap
